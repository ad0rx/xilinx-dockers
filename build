#!/usr/bin/env bash
#
# New flow for building the base image for Bus Defender. You end up
# with a running container which has ws_tester.py installed and is
# runnable.
#######################################################################

# Exit on error
set -e

NETWORK="none"

IMAGE_NAME="test:002"
CONTAINER_NAME="test-002-${NETWORK}"

# ws_tester support
HC_ATTACK_ZIP="/home/brad/Downloads/hc-attack-hardcider-2018.zip"
TESTING_FRAMEWORK_ZIP="/home/brad/Downloads/testing-framework-master.zip"

# Path on local machine to the extracted vivado unified installer
# This path will be mounted to /vivado_extracted inside the container
VIVADO_EXTRACTED="/mnt/BACKUP/archive/xilinx/Xilinx_Unified_2022.2_1014_8888"

XILINX_INSTALL_DIR="/mnt/BACKUP/xilinx_docker_installs"

# Path on local machine to where projects root. Will be mounted to
# /projects in container
PROJECTS_PATH="/home/brad/projects"

function build_image () {

    # Build the image
    DOCKER_BUILDKIT=1                       \
                   docker build             \
                   --tag ${IMAGE_NAME}      \
                   --build-arg UNAME=$USER  \
                   --ssh default            \
                   --build-arg UID=$(id -u) \
                   --build-arg GID=$(id -g) \
                   -f Dockerfile .

}

# if this script is invoked with any argument, you get network=host,
# otherwise no network
function run_container () {

    # Capture output here, which contains the container ID
    OUTFILE=/tmp/run.sh.test.out

    NETWORK=none
    CPU_SHARES=1024
    if [ -n "$1" ]
    then

        NETWORK=host
        echo "Setting NETWORK=$NETWORK"

        #CPU_SHARES=128
        #echo "Setting CPU_SHARES=$CPU_SHARES"

    fi

    mkdir -p ${XILINX_INSTALL_DIR} &&
        chmod -R 777 ${XILINX_INSTALL_DIR}

        # Run the image / create container
        # -v /home:/home                                        \
            docker run -itd --hostname=dkr --env DISPLAY=:0.0       \
                   --privileged                                     \
                   --network=${NETWORK}                             \
                   -e HOME=${HOME} -w ${HOME}                       \
                   -v /tmp/.X11-unix:/tmp/.X11-unix                 \
                   -v "${HOME}/.Xauthority:/${HOME}/.Xauthority:rw" \
                   --mount type=bind,src=${VIVADO_EXTRACTED},dst=/vivado_extracted   \
                   --mount type=bind,src=${PROJECTS_PATH},dst=/projects              \
                   --mount type=bind,src=${XILINX_INSTALL_DIR},dst=/xilinx_install_dir \
                   --rm --cpu-shares=${CPU_SHARES}                  \
                   --cpus=6                                         \
                   --name ${CONTAINER_NAME}                         \
                   ${IMAGE_NAME}

}

# Be careful of modding this function because it has to play nice with
# the ws_tester section in the Dockerfile
function add_ws_tester () {

    # Copy files from the local machines file system into the docker
    # container
    docker cp ${HC_ATTACK_ZIP}         ${CONTAINER_NAME}:/ws_tester/
    docker cp ${TESTING_FRAMEWORK_ZIP} ${CONTAINER_NAME}:/ws_tester/

    # Unzip the repos
    docker exec -it -w /ws_tester ${CONTAINER_NAME} unzip *zip

    # Install hc-attack
    docker exec -it -w /ws_tester/hc-attack-hardcider-2018 ${CONTAINER_NAME} python3.8 -m pip install --user .

    # Install testing-framework
    docker exec -it -w /ws_tester/testing-framework-master ${CONTAINER_NAME} python3.8 -m pip install --user .

}

function add_vivado () {

    # We check to determine if we need to do this, and we don't check
    # other steps such as add_ws_tester because the vivado
    # installation is not kept within the container, and ws_tester is
    # kept in the container. So, if this is a new build, which is the
    # use case, then we can correctly assume that ws_tester is not
    # installed. However, the vivado install is kept as data on an
    # external drive, because it's huge etc. That means it can persist
    # between builds of the docker image, thus we check if it's
    # already installed.
    if [ ! -e /mnt/BACKUP/xilinx_docker_installs/Vivado/2022.2/settings64.sh ]
    then

        # Allow root@dkr to make windows in local user's window manager
        xhost +
        docker exec -it -w               \
               /vivado_extracted         \
               ${CONTAINER_NAME} ./xsetup

    else

        echo
        cat <<EOF
It appears that Vivado 2022.2 may already be installed
because ${XILINX_INSTALLS_DIR}/Vivado/2022.2/settings64.sh
exists. Skipping the installation of Vivado.
EOF

    fi

}

function add_rcfiles () {

    docker exec -it ${CONTAINER_NAME} bash -c '
            git clone https://github.com/ad0rx/rcfiles.git;
            for f in .bashrc .screenrc ; do ln -vfs rcfiles/$f $f; done;
            pwd'

}

#######################################################################
#######################################################################

# Begin Main Execution
build_image
run_container host
add_rcfiles
add_ws_tester
add_vivado
